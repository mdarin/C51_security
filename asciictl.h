#ifndef ASCIICTL_H
#define ASCIICTL_H
#define NUL 0x00 // — Null, пустой. Всегда игнорировался. На перфолентах 1 представлялась отверстием 0x0 // — отсутствием отверстия. Поэтому пустые части перфоленты до начала и после конца сообщения состояли из таких символов. Сейчас используется во многих языках программирования как конец строки. (Строка понимается как последовательность символов.) В некоторых операционных системах NUL // — последний символ любого текстового файла.
#define SOH 0x01 // — Start Of Heading, начало заголовка.
#define STX 0x02 // — Start of Text, начало текста. Текстом называлась часть сообщения, предназначенная для печати. Адрес, контрольная сумма и т. д. входили или в заголовок, или в часть сообщения после текста.
#define ETX 0x03 // — End of Text, конец текста. Здесь телетайп прекращал печатать. Использование символа Ctrl-C, имеющего код 03, для прекращения работы чего-то (обычно программы), восходит ещё к тем временам.
#define EOT 0x04 // — End of Transmission, конец передачи. В системе UNIX Ctrl-D, имеющий тот же код, означает конец файла при вводе с клавиатуры.
#define ENQ 0x05 // — Enquire. Прошу подтверждения.
#define ACK 0x06 // — Acknowledgement. Подтверждаю.
#define BEL 0x07 // — Bell, звонок, звуковой сигнал. Сейчас тоже используется. В языках программирования C и C++ обозначается \a.
#define BS 0x08 // — Backspace, возврат на один символ. Сейчас стирает предыдущий символ.
#define TAB 0x09 // — Tab, горизонтальная табуляция.
#define LF 0x0A // — Line Feed, перевод строки. Сейчас в конце каждой строчки текстового файла ставится либо этот символ, либо CR, либо и тот и другой (CR, затем LF), в зависимости от операционной системы. Во многих языках программирования обозначается \n и при выводе текста приводит к переводу строки.
#define VT 0x0B // — Vertical Tab, вертикальная табуляция.
#define FF 0x0C // — Form Feed, прогон страницы, новая страница.
#define CR 0x0D // — Carriage Return, возврат каретки. Во многих языках программирования этот символ, обозначаемый \r, можно использовать для возврата в начало строчки без перевода строки. В некоторых операционных системах этот же символ, обозначаемый Ctrl-M, ставится в конце каждой строчки текстового файла перед LF.
#define SO 0x0E // — Shift Out, измени цвет ленты (использовался для двуцветных лент; цвет менялся обычно на красный). В дальнейшем обозначал начало использования национальной кодировки.
#define SI 0x0F // — Shift In, обратно к Shift Out.
#define DLE 0x10 // — Data Link Escape, освобождение канала данных // — следующие символы представляют собой данные, а не управляющие символы.
#define DC1 0x11 // — Device Control 1 0x1-й символ управления устройством // — включить устройство чтения перфоленты.
#define DC2 0x12 // — Device Control 2 0x2-й символ управления устройством // — включить перфоратор.
#define DC3 0x13 // — Device Control 3 0x3-й символ управления устройством // — выключить устройство чтения перфоленты.
#define DC4 0x14 // — Device Control 4 0x4-й символ управления устройством // — выключить перфоратор.
#define NAK 0x15 // — Negative Acknowledgment, не подтверждаю. Обратно Acknowledgment.
#define SYN 0x16 // — Synchronization. Этот символ передавался, когда для синхронизации было необходимо что-нибудь передать.
#define ETB 0x17 // — End of Text Block, конец текстового блока. Иногда текст по техническим причинам разбивался на блоки.
#define CAN 0x18 // — Cancel, отмена (того, что было передано ранее).
#define EM 0x19 // — End of Medium, конец носителя (кончилась перфолента и т. д.)
#define SUB 0x1A // — Substitute, подставить. Ставится на месте символа, значение которого было потеряно или испорчено при передаче. Сейчас Ctrl-Z используется как конец файла при вводе с клавиатуры в системах DOS и Windows. У этой функции нет никакой очевидной связи с символом SUB.
#define ESC 0x1B // — Escape. Следующие за ним символы имеют какое-то другое значение, отличное от того, которое определено в ASCII. Обычно начинал управляющие последовательности.
#define FS 0x1C // — File Separator, разделитель файлов.
#define GS 0x1D // — Group Separator, разделитель групп.
#define RS 0x1E // — Record Separator, разделитель записей.
#define US 0x1F // — Unit Separator, разделитель юнитов. То есть поддерживалось 4 уровня структуризации данных: сообщение могло состоять из файлов, файлы из групп, группы из записей, записи из юнитов.
#define DEL 0x7F // — Delete, стереть последний символ. Символом DEL, состоящим в двоичном коде из всех единиц, можно было забить любой символ. Устройства и программы игнорировали DEL так же, как NUL. Код этого символа происходит из первых текстовых процессоров с памятью на перфоленте: в них удаление символа происходило забиванием его кода дырочками (обозначавшими логические единицы).
#endif //ASCIICTL_H

